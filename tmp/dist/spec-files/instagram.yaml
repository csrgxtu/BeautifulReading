---
swagger: '2.0'
info:
  version: v1
  title: Instagram API
  description: |
    The first version of the Instagram API is an exciting step forward towards
    making it easier for users to have open access to their data. We created it
    so that you can surface the amazing content Instagram users share every
    second, in fun and innovative ways.

    Build something great!

    Once you've [registered your client](http://instagram.com/developer/register/) it's easy to start requesting data from Instagram.
    All endpoints are only accessible via https and are located at api.instagram.com. For instance:
    you can grab the most popular photos at the moment by accessing the following URL with your client ID (replace CLIENT-ID with your own):
    ```
      https://api.instagram.com/v1/media/popular?client_id=CLIENT-ID
    ```
    You're best off using an access_token for the authenticated user for each endpoint, though many endpoints don't require it.
    In some cases an access_token will give you more access to information, and in all cases, it means that you are operating
    under a per-access_token limit vs. the same limit for your single client_id.
    ## Important Note
    The URL examples throughout this documentation include an access_token that represents YOUR account tied to a generic Instagram client.
    **DO NOT use this access_token in production or for anything other than testing as they will change often**.
    For your application, you should have each user go through an [authentication and authorization](http://instagram.com/developer/authentication/) flow in order to receive a valid access_token.
    ## Limits
    Be nice. If you're sending too many requests too quickly, we'll send back a 503 error code (server unavailable).
    You are limited to 5000 requests per hour per access_token or client_id overall. Practically, this means you should (when possible) authenticate users so that limits are well outside the reach of a given user.
    ## Deleting Objects
    We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects, and finally DELETE requests will delete objects.
    Since many old browsers don't support PUT or DELETE, we've made it easy to fake PUTs and DELETEs. All you have to do is do a POST with _method=PUT or _method=DELETE as a parameter and we will treat it as if you used PUT or DELETE respectively.
    ## Structure
    ### The Envelope
    Every response is contained by an envelope. That is, each response has a predictable set of keys with which you can expect to interact:
    ```json
    {
        "meta": {
            "code": 200
        },
        "data": {
            ...
        },
        "pagination": {
            "next_url": "...",
            "next_max_id": "13872296"
        }
    }
    ```
    #### META
    The meta key is used to communicate extra information about the response to the developer. If all goes well, you'll only ever see a code key with value 200. However, sometimes things go wrong, and in that case you might see a response like:
    ```json
    {
        "meta": {
            "error_type": "OAuthException",
            "code": 400,
            "error_message": "..."
        }
    }
    ```
    #### DATA
    The data key is the meat of the response. It may be a list or dictionary, but either way this is where you'll find the data you requested.
    #### PAGINATION
    Sometimes you just can't get enough. For this reason, we've provided a convenient way to access more data in any request for sequential data. Simply call the url in the next_url parameter and we'll respond with the next set of data.
    ```json
    {
        ...
        "pagination": {
            "next_url": "https://api.instagram.com/v1/tags/puppy/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&max_id=13872296",
            "next_max_id": "13872296"
        }
    }
    ```
    On views where pagination is present, we also support the "count" parameter. Simply set this to the number of items you'd like to receive. Note that the default values should be fine for most applications - but if you decide to increase this number there is a maximum value defined on each endpoint.
    ### JSONP
    If you're writing an AJAX application, and you'd like to wrap our response with a callback, all you have to do is specify a callback parameter with any API call:
    ```
    https://api.instagram.com/v1/tags/coffee/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&callback=callbackFunction
    ```
    Would respond with:
    ```js
    callbackFunction({
        ...
    });
    ```
  termsOfService: http://instagram.com/about/legal/terms/api
host: api.instagram.com
basePath: /v1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json
tags:
  - name: Users
  - name: Relationships
  - name: Media
  - name: Commnts
  - name: Likes
  - name: Tags
  - name: Location
  - name: Subscribtions
securityDefinitions:
  oauth:
    type: oauth2
    flow: implicit
    authorizationUrl: https://instagram.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token
    scopes:
      basic: to read any and all data related to a user (e.g. following/followed-by lists, photos, etc.) (granted by default)
      comments: to create or delete comments on a user’s behalf
      relationships: to follow and unfollow users on a user’s behalf
      likes: to like and unlike items on a user’s behalf
  key:
    type: apiKey
    in: query
    name: access_token
security:
  - oauth:
    - basic
    - comments
    - relationships
    - likes
paths:

  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        description: The user identifier number
        type: number
    get:
      security:
        - key: []
        - oauth:
          - basic
      tags:
        - Users
      description: Get basic information about a user.
      responses:
        200:
          description: The user object
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/User'

  /users/self/feed:
    get:
      tags:
        - Users
      description: See the authenticated user's feed.
      parameters:
        - name: count
          in: query
          description: Count of media to return.
          type: integer
        - name: max_id
          in: query
          description: Return media earlier than this max_id.s
          type: integer
        - name: min_id
          in: query
          description: Return media later than this min_id.

          type: integer
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'

  /users/{user-id}/media/recent:
    parameters:
      - name: user-id
        in: path
        description: description
        type: integer
    get:
      tags:
        - Users
      responses:
        200:
          description: Get the most recent media published by a user. To get the most recent media published by the owner of the access token, you can use `self` instead of the `user-id`.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'
      parameters:
        - name: count
          in: query
          description: Count of media to return.
          type: integer
        - name: max_timestamp
          in: query
          description: Return media before this UNIX timestamp.
          type: integer
        - name: min_timestamp
          in: query
          description: Return media after this UNIX timestamp.
          type: integer
        - name: min_id
          in: query
          description: Return media later than this min_id.
          type: string
        - name: max_id
          in: query
          description: Return media earlier than this max_id.
          type: string

  /users/self/media/liked:
    get:
      tags:
        - Users
      description: See the list of media liked by the authenticated user. Private media is returned as long as the authenticated user has permission to view that media. Liked media lists are only available for the currently authenticated user.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Media'
      parameters:
        - name: count
          in: query
          description: Count of media to return.
          type: integer
        - name: max_like_id
          in: query
          description: Return media liked before this id.
          type: integer

  /users/search:
    get:
      tags:
        - Users
      description: Search for a user by name.
      parameters:
        - name: q
          in: query
          description: A query string
          type: string
        - name: count
          in: query
          description: Number of users to return.
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/MiniProfile'



definitions:
  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      full_name:
        type: string
      profile_picture:
        type: string
      bio:
        type: string
      website:
        type: string
      counts:
        type: object
        properties:
          media:
            type: integer
          follows:
            type: integer
          follwed_by:
            type: integer
  Media:
    type: object
    properties:
      created_time:
        description: Epoc time (ms)
        type: integer
      type:
        type: string
      filter:
        type: string
      tags:
        type: array
        items: {} # TODO
      id:
        type: integer
      user:
        $ref: '#/definitions/MiniProfile'
      users_in_photo:
        type: array
        items: {} # TODO
      location:
        $ref: '#/definitions/Location'
      comments::
        type: object
        properties:
          count:
            type: integer
          data:
            type: array
            items:
              $ref: '#/definitions/Comment'
      likes:
        type: object
        properties:
          count:
            type: integer
          data:
            type: array
            items:
              $ref: '#/definitions/MiniProfile'
      images:
        properties:
          low_resolution:
            $ref: '#/definitions/Image'
          thumbnail:
            $ref: '#/definitions/Image'
          standard_resolution:
            $ref: '#/definitions/Image'
      videos: {} #TODO
  Location: {}
  Comment: {}
  Image:
    properties:
      width:
        type: integer
      height:
        type: integer
      url:
        type: string
  MiniProfile:
    description: A shorter version of User for likes array
    properties:
      user_name:
        type: string
      full_name:
        type: string
      id:
        type: integer
      profile_picture:
        type: string # Not sure about this
